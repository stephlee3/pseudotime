library(tidyverse)
library(reshape2)
library(sva)
library(preprocessCore)

remove_batch_effect = function(dat, batch, mod = NULL){
  batchmod = model.matrix(~ -1 + batch)
  nbatch = ncol(batchmod)
  design = cbind(batchmod, mod)
  
  dat.adj = t(sapply(1:nrow(dat),function(g){
    y = dat[g,]
    beta.hat = solve(crossprod(design), crossprod(design, y))
    gamma.hat = batchmod %*% beta.hat[1:nbatch,]
    grand.mean = mean(gamma.hat)
    gamma.hat = gamma.hat-grand.mean
    y - gamma.hat
  }))
  dimnames(dat.adj) = dimnames(dat)
  return(dat.adj)
}

process_sample_pb = function(d, batch = NULL, batch_correction = T, HVG = T, correction_method = 'combat', nhvg = 2000){
 
  d <- d[!grepl('MT-',rownames(d)),]
  d <- d[rowMeans(d > 0.01) > 0.1,]
  
  if (batch_correction){
    #d  = get("sample_pb_correct")
    dn = dimnames(d)
    d = normalize.quantiles(d); dimnames(d)= dn
    if (correction_method == 'combat')
      d = sva::ComBat(d, batch = batch)
    if (correction_method == 'lm')
      d = remove_batch_effect(d, batch = batch)
  
  } 
  if (HVG){
    cm <- rowMeans(d)
    #csd <- sqrt((rowMeans(d*d) - cm^2) / (ncol(d) - 1) * ncol(d))
    cvar <- (rowMeans(d*d)-cm ^2)/(ncol(d) - 1) * ncol(d)
    mod <- loess(cvar~cm)
    if (!is.null(nhvg)){
      rid = order(resid(mod),decreasing = T)[1:nhvg]
    } else{
      rid <- which(resid(mod) > 0)
    }
    d <- d[rid,]
  }
  #if (scale){
  #  d<- (d-rowMeans(d))/apply(d,1,sd)
  #}
  return(d)
}


process_cluster_pb = function(li, batch = NULL, topclu_pct = 0.5,batch_correction = F, HVG = T, correction_method = 'combat', nhvg = 2000, feature.pct = 0.5){
  
  l <- lapply(1:length(li),function(i) {
  print(names(li)[i])
  d <- li[[i]]
  
  if (ncol(d) == 1)
    return(list(d = NULL, nfeature= 0))
    
  d <- d[!grepl('MT-',rownames(d)),]
  d <- d[rowMeans(d > 0.01) > 0.1,]
  if (nrow(d)==0)
    return(list(d = NULL, nfeature= 0))
  
  
  ## data matrix zm with all the patients
  zm = matrix(0, nrow(d), nrow(patient_info)); colnames(zm) = patient_info$Patient; rownames(zm) = rownames(d)
  idx = na.omit(match(colnames(d), patient_info$Patient))
  zm[,idx] = d
  d = zm

  rownames(d)<- paste0(rownames(d),':',names(li)[i])
  if (batch_correction){
    dn = dimnames(d)
    d = normalize.quantiles(d); dimnames(d)= dn
    
    if (correction_method == 'combat'){
       dd = try(sva::ComBat(d, batch = batch))
       if (!'try-error' %in% class(dd))
          d = dd
    }
    if (correction_method == 'lm')
      d = remove_batch_effect(d, batch = batch)
  }
  if (!HVG){
    return(d)
  }
  
  if (HVG){
    cm <- rowMeans(d)
    cvar <- (rowMeans(d*d) - cm^2) / (ncol(d) - 1) * ncol(d)
    mod <- loess(cvar~cm)
    rid <- which(resid(mod) > 0)
    nfeature = length(rid)
    
    if (!is.null(nhvg)){
      if (nfeature > nhvg){
        rid = order(resid(mod),decreasing = T)[1:nhvg]
      } 
    } 
    d <- d[rid,]
    return(list(d = d, nfeature = nfeature))

  }
  })
  if (!HVG)
    d = do.call(rbind, l)
  
  if (HVG){
    d <- lapply(1:length(l), function(i) l[[i]]$d)
    nfeature <- sapply(l, function(i) i$nfeature)
    names(nfeature) = names(li)
    topclu = which(rank(-nfeature)<= feature.pct * length(l))
    print(topclu) 
    d = do.call(rbind,d[topclu])
  }
  return(d)
}

extract_pb_PC = function(pb, topPCs = 10, pc.scale = T){
  pb = na.omit(pb) # remove NA rows
  #print(str(pb))
  #rsd = apply(pb,1,sd)
  rsd <- sqrt((rowMeans(pb * pb) - rowMeans(pb)^2) / (ncol(pb) - 1) * ncol(pb))
  pb = pb[which(rsd!=0),]
  pbpca = prcomp(t(pb),scale. = pc.scale)$x
  topPCs = min(ncol(pbpca),topPCs)
  pbpca = pbpca[,1:topPCs]
  return(pbpca)
}

get_pseudo_bulk_dist = function(pb,batch = NULL, dist.method = "sample_pb", batch_correction = F, correction_method = 'combat', 
                                HVG = T, pc.scale = T,feature.pct = 0.5, topPCs = 10, nhvg = 2000){
  if (dist.method == "sample_pb"){
    pb_proc = process_sample_pb(pb,batch = batch, batch_correction = batch_correction, HVG = HVG, correction_method = correction_method, nhvg = nhvg)
    #saveRDS(pb_proc,"../../data/sample_pb_proc.rds")
  }
  else{
    pb_proc = process_cluster_pb(pb, batch = batch, batch_correction = batch_correction, HVG = HVG, correction_method = correction_method, feature.pct = feature.pct, nhvg = nhvg)
    #saveRDS(pb_proc,"../../data/cluster_pb_proc.rds")
  }
  pbpca = extract_pb_PC(pb_proc,topPCs = topPCs, pc.scale = pc.scale)
  
  dist_matrix = as.matrix(dist(pbpca),diag = T)
  lookup_table = melt(dist_matrix)
  colnames(lookup_table)  = c("pt1","pt2","dist")
  print(head(lookup_table))
  
  ans = list(lookup_table = lookup_table, dist_matrix = dist_matrix, feature_PC = pbpca)
  return(ans)
}

