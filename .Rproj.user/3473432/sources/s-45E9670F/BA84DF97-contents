library(tidyverse)
library(ggpubr)
library(reshape2)
library(gridExtra)
library(sva)
library(preprocessCore)
library(Seurat)

cluster_pb = readRDS("../../data/cluster_pb.rds") 
sample_pb = readRDS("../../data/sample_pb.rds") 
patient_info = readRDS("../../data/patient_info.rds")
patient_info$Phenotype = as.factor(patient_info$Phenotype)

clu = readRDS("../../data/cluster.rds")
batch = patient_info$Batch



# sample-level pseudoubulk: pb_base
remove_batch_effect = function(dat, batch, mod = NULL){
  batchmod = model.matrix(~ -1 + batch)
  nbatch = ncol(batchmod)
  design = cbind(batchmod, mod)
  
  dat.adj = t(sapply(1:nrow(dat),function(g){
    y = dat[g,]
    beta.hat = solve(crossprod(design), crossprod(design, y))
    gamma.hat = batchmod %*% beta.hat[1:nbatch,]
    grand.mean = mean(gamma.hat)
    gamma.hat = gamma.hat-grand.mean
    y - gamma.hat
  }))
  dimnames(dat.adj) = dimnames(dat)
  return(dat.adj)
}


sample_pb_batch_removal= function(d, batch = NULL){
  d <- d[!grepl('MT-',rownames(d)),]
  d <- d[rowMeans(d > 0.01) > 0.1,]
  dn = dimnames(d)
  d = normalize.quantiles(d); dimnames(d)= dn
  d = sva::ComBat(d, batch = batch)
  return(d)
}

cluster_pb_list2mat = function(li){
  d <- lapply(1:length(li),function(i){
    d <- li[[i]]
    d <- d[!grepl('MT-',rownames(d)),]
    d <- d[rowMeans(d > 0.01) > 0.1,]
    if (nrow(d) == 0) 
      return(NULL)
    
    ## data matrix zm with all the patients
    mat = matrix(0, nrow(d), nrow(patient_info)); colnames(mat) = patient_info$Patient; rownames(mat) = rownames(d)
    idx = na.omit(match(colnames(d), patient_info$Patient))
    mat[,idx] = d
    rownames(mat)<- paste0(rownames(mat),':',names(li)[i])
    return(mat)
  })
  d = do.call(rbind,d)
  return(d)
}

#cluster_pb_mat = cluster_pb_list2mat(cluster_pb)


cluster_pb_batch_removal = function(d, batch = NULL, correction_method = 'combat'){
  dn = dimnames(d)
  d = normalize.quantiles(d); dimnames(d)= dn
  if (correction_method == 'combat')
    d = sva::ComBat(d, batch = batch)
  if (correction_method == 'lm')
    d = remove_batch_effect(d, batch = batch)
  return(d)
}


#sample_pb_correct = sample_pb_batch_removal(sample_pb, batch)
#cluster_pb_correct = cluster_pb_batch_removal(cluster_pb_mat, batch, correction_method = 'combat')

#########################################################
process_sample_pb = function(d, batch = NULL, batch_correction = T, HVG = T, correction_method = 'combat'){
 
  d <- d[!grepl('MT-',rownames(d)),]
  d <- d[rowMeans(d > 0.01) > 0.1,]
  
  if (batch_correction){
    #d  = get("sample_pb_correct")
    dn = dimnames(d)
    d = normalize.quantiles(d); dimnames(d)= dn
    if (correction_method == 'combat')
      d = sva::ComBat(d, batch = batch)
    if (correction_method == 'lm')
      d = remove_batch_effect(d, batch = batch)
  
  } 
  if (HVG){
    cm <- rowMeans(d)
    #csd <- sqrt((rowMeans(d*d) - cm^2) / (ncol(d) - 1) * ncol(d))
    cvar <- (rowMeans(d*d)-cm ^2)/(ncol(d) - 1) * ncol(d)
    mod <- loess(cvar~cm)
    rid <- which(resid(mod) > 0)
    d <- d[rid,]
  }
  #if (scale){
  #  d<- (d-rowMeans(d))/apply(d,1,sd)
  #}
  return(d)
}


# d: list of pseudobulk
#a = process_cluster_pb(cluster_pb, pt = pt, batch = batch)
process_cluster_pb = function(li, pt, batch = NULL, topclu_pct = 0.5,batch_correction = F, HVG = T, correction_method = 'combat'){
  
  l <- lapply(1:length(li),function(i) {
  print(names(li)[i])
  d <- li[[i]]
  
  d <- d[!grepl('MT-',rownames(d)),]
  d <- d[rowMeans(d > 0.01) > 0.1,]
  if (nrow(d)==0)
    return(list(d = NULL, rid = NULL))
  
  
  ## data matrix zm with all the patients
  zm = matrix(0, nrow(d), nrow(patient_info)); colnames(zm) = patient_info$Patient; rownames(zm) = rownames(d)
  idx = na.omit(match(colnames(d), patient_info$Patient))
  zm[,idx] = d
  d = zm

  rownames(d)<- paste0(rownames(d),':',names(li)[i])
  if (batch_correction){
    dn = dimnames(d)
    d = normalize.quantiles(d); dimnames(d)= dn
    
    if (correction_method == 'combat'){
       dd = try(sva::ComBat(d, batch = batch))
       if (!'try-error' %in% class(dd))
          d = dd
    }
    if (correction_method == 'lm')
      d = remove_batch_effect(d, batch = batch)
  }
  if (!HVG){
    return(d)
  }
  
  if (HVG){
    cm <- rowMeans(d)
    cvar <- (rowMeans(d*d) - cm^2) / (ncol(d) - 1) * ncol(d)
    mod <- loess(cvar~cm)
    rid <- which(resid(mod) > 0)
    d <- d[rid,]
    return(list(d = d, rid = rid))

  }
  })
  if (!HVG)
    d = do.call(rbind, l)
  
  if (HVG){
    d <- lapply(1:length(l), function(i) l[[i]]$d)
    nhvg<- sapply(1:length(l),function(i) length(l[[i]]$rid))
    names(nhvg) = names(li)
    print(sort(nhvg,decreasing = T))
    d = do.call(rbind,d)
  }
  return(d)
}

process_cluster_pb_concat = function(li, batch = NULL, batch_correction = T, HVG = T){
  
  if (batch_correction){
    d  = get("cluster_pb_correct")
    #dn = dimnames(d)
    #d = normalize.quantiles(d); dimnames(d)= dn
    #dtry = try(sva::ComBat(d, batch = batch))
    #if (class(dtry) != 'try-error')
    #  d = dtry
  } else{
    d = get("cluster_pb_mat")
  }
  
  print(str(d))
   
  if (HVG){
    cm <- rowMeans(d)
    print("rowmean completed!")
    #csd <- sqrt((rowMeans(d*d) - cm^2) / (ncol(d) - 1) * ncol(d))
    cvar <- (rowMeans(d*d)-cm ^2)/(ncol(d) - 1) * ncol(d)
    print("rowvar completed!")
    mod <- loess(cvar~cm)
    print("loess completed!")
    rid <- which(resid(mod) > 0)
    d <- d[rid,]
  }
  clu = gsub('(.*):(.*)','\\2', rownames(d))
  print(table(clu))
  return(d)
}



extract_pb_PC = function(pb, topPCs = 10, pc.scale = T){
  pb = na.omit(pb) # remove NA rows
  #print(str(pb))
  #rsd = apply(pb,1,sd)
  rsd <- sqrt((rowMeans(pb * pb) - rowMeans(pb)^2) / (ncol(pb) - 1) * ncol(pb))
  pb = pb[which(rsd!=0),]
  pbpca = prcomp(t(pb),scale. = pc.scale)$x
  topPCs = min(ncol(pbpca),topPCs)
  pbpca = pbpca[,1:topPCs]
  return(pbpca)
}


get_pseudo_bulk_dist = function(pb,pt, batch = NULL, dist.method = "sample_pb", batch_correction = F, correction_method = 'combat', 
                                HVG = T, pc.scale = T,topPCs = 10){
  if (dist.method == "sample_pb"){
    pb_proc = process_sample_pb(pb,batch = batch, batch_correction = batch_correction, HVG = HVG, correction_method = correction_method)
    #saveRDS(pb_proc,"../../data/sample_pb_proc.rds")
  }
  else{
    pb_proc = process_cluster_pb(pb, batch = batch, batch_correction = batch_correction, HVG = HVG, correction_method = correction_method)
    #saveRDS(pb_proc,"../../data/cluster_pb_proc.rds")
  }
  pbpca = extract_pb_PC(pb_proc,topPCs = topPCs, pc.scale = pc.scale)
  
  dist_matrix = as.matrix(dist(pbpca),diag = T)
  lookup_table = melt(dist_matrix)
  colnames(lookup_table)  = c("pt1","pt2","dist")
  print(head(lookup_table))
  
  ans = list(lookup_table = lookup_table, dist_matrix = dist_matrix, feature_PC = pbpca)
  return(ans)
}


  
opt = expand.grid(dist.method = c("sample_pb","cluster_pb"),
                  batch_correction = c(T,F),
                  correction_method = c("combat","lm", "none"),
                  HVG = c(T,F),
                  pc.scale = c(T,F),
                  stringsAsFactors = F) %>%
      filter((batch_correction & correction_method!= 'none') | (!batch_correction & correction_method == 'none')) %>%
      mutate(label = paste0(dist.method,"_batch",batch_correction,"_",correction_method,"_hvg", HVG, "_scale", pc.scale))

dist_list = lapply(1:nrow(opt),function(i){
  print(opt[i,])
  get_pseudo_bulk_dist(pb = get(opt$dist.method[i]), batch = batch, batch_correction = opt$batch_correction[i], 
                       correction_method = opt$correction_method[i], dist.method = opt$dist.method[i],
                       HVG = opt$HVG[i], pc.scale = opt$pc.scale[i], topPCs= 10)
})
names(dist_list) = opt$label
saveRDS(dist_list, "../../data/dist_pb_list.rds")

dim_red_plot = function(dist_mat, dist.method = "euclid", 
                        dat, vis.method = "MDS",
                        group.variable = "Phenotype",
                        label = 'Patient', point_size = 1, alpha = 1,
                        repel = T){
  if (vis.method == "MDS"){
    mds <- dist_mat %>%         
      cmdscale() %>%
      as.data.frame() %>%
      mutate(Patient = rownames(dist_mat)) %>% 
      inner_join(patient_info, by = "Patient")
    print(head(mds))
    
    colnames(mds)[1:2] <- c("MDS1", "MDS2")
    # Plot MDS
    p = ggscatter(mds, x = "MDS1", y = "MDS2", 
                  color = group.variable, #label = label,
                  title = dist.method,
                  size = point_size, alpha = alpha,#ellipse = TRUE,
                  #ellipse.type = "convex",
                  repel = repel)
    return(p)
  }
  
  if (vis.method == "PCA"){
    pc <- dat[,c("PC1","PC2")]%>%         
      as.data.frame() %>%
      mutate(Patient = rownames(.)) %>% 
      inner_join(patient_info, by = "Patient")
    print(head(pc))
    
    colnames(pc)[1:2] <- c("PC1", "PC2")
    # Plot PC
    p = ggscatter(pc, x = "PC1", y = "PC2", 
                  color = group.variable, # label = label, 
                  title = dist.method,
                  size = point_size, alpha = alpha, #ellipse = TRUE,
                  #ellipse.type = "convex",
                  repel = repel)
    return(p)
  }
  
}

pdf("../../figure/pca_pb_phenotype.pdf")
lapply(1:length(dist_list), function(i){
  if (!is.null(dim(dist_list[[i]]$feature_PC))){
      try(dim_red_plot(dist_mat = dist_list[[i]]$dist_matrix, dat = dist_list[[i]]$feature_PC ,
               vis.method = "PCA", dist.method = opt$label[i], label = "Phentoype", group.variable = "Phenotype", repel = F, point_size = 2, alpha = 0.6))
  }
})
lapply(1:length(dist_list), function(i){
  try(dim_red_plot(dist_mat = dist_list[[i]]$dist_matrix,vis.method = "MDS", dist.method = opt$label[i], label = "Phentoype", group.variable = "Phenotype", repel = F, point_size = 2, alpha = 0.6))
})
dev.off()

pdf("../../figure/pca_pb_batch.pdf")
lapply(1:length(dist_list), function(i){
  if (!is.null(dim(dist_list[[i]]$feature_PC))){
      try(dim_red_plot(dist_mat = dist_list[[i]]$dist_matrix, dat = dist_list[[i]]$feature_PC ,
               vis.method = "PCA", dist.method = opt$label[i], label = "Batch", group.variable = "Batch", repel = F, point_size = 2, alpha = 0.6))
  }
})
lapply(1:length(dist_list), function(i){
  try(dim_red_plot(dist_mat = dist_list[[i]]$dist_matrix,vis.method = "MDS", dist.method = opt$label[i], label = "Batch", group.variable = "Batch", repel = F, point_size = 2, alpha = 0.6))
})
dev.off()

